import java.util.ArrayList;
import java.util.HashMap;

public class TaskManager {
    protected HashMap<Integer, Task> tasks;
    protected HashMap<Integer, Epic> epics;
    protected HashMap<Integer, Subtask> subtasks;

    public TaskManager() {
        tasks = new HashMap<>();
        epics = new HashMap<>();
        subtasks = new HashMap<>();
        System.out.println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–∞—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä!");
    }

    // —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Å–∫–∏
    public void createTask(String title, String description) {
        Task task = new Task(title, description);
        tasks.put(task.getId(), task);
        System.out.println("\n–ù–æ–≤–∞—è —Ç–∞—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!");
        System.out.println("ID-" + task.getId() + " -- " + task.getTitle());
    }

    // —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ø–∏–∫–∞
    public void createEpic(String title, String description) {
        Epic epic = new Epic(title, description);
        epics.put(epic.getId(), epic);
        System.out.println("\n–ù–æ–≤—ã–π —ç–ø–∏–∫ —Å–æ–∑–¥–∞–Ω!");
        System.out.println("ID-" + epic.getId() + " -- " + epic.getTitle());
    }

    // —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–±—Ç–∞—Å–∫–∏
    public void createSubtask(String title, String description, int epicId) {
        Epic epic = epics.get(epicId);
        ArrayList<Integer> subtasksIds = epic.getSubtasksIds();
        Subtask subtask = new Subtask(title, description, epicId);
        int subId = subtask.getId();

        subtasks.put(subId, subtask);
        subtasksIds.add(subId);
        epic.setSubtasksIds(subtasksIds);

        System.out.println("\n–í —ç–ø–∏–∫ ID-" + epicId + " –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–∞–±—Ç–∞—Å–∫–∞");
        System.out.println("ID-" + subId + " -- " + title);
        calculateEpicStatus(epicId);
    }

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞—Å–∫–∏
    public void updateTaskTitle(int taskId, String title) {
        Task task = tasks.get(taskId);
        task.setTitle(title);
        tasks.put(taskId, task);
        System.out.println("\n–¢–∞—Å–∫–∞ ID-" + taskId + " –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    }

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞—Å–∫–∏
    public void updateTaskDescription(int taskId, String description) {
        Task task = tasks.get(taskId);
        task.setDescription(description);
        tasks.put(taskId, task);
        System.out.println("\n–¢–∞—Å–∫–∞ ID-" + taskId + " –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    }

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∞—Å–∫–∏
    public void updateTaskStatus(int taskId, Status status) {
        Task task = tasks.get(taskId);
        task.setStatus(status);
        tasks.put(taskId, task);
        System.out.println("\n–¢–∞—Å–∫–∞ ID-" + taskId + " –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    }

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —ç–ø–∏–∫–∞
    public void updateEpicTitle(int epicId, String title) {
        Epic epic = epics.get(epicId);
        epic.setTitle(title);
        epics.put(epicId, epic);
        System.out.println("\n–≠–ø–∏–∫ ID-" + epicId + " –æ–±–Ω–æ–≤–ª—ë–Ω");
    }

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —ç–ø–∏–∫–∞
    public void updateEpicDescription(int epicId, String description) {
        Epic epic = epics.get(epicId);
        epic.setDescription(description);
        epics.put(epicId, epic);
        System.out.println("\n–≠–ø–∏–∫ ID-" + epicId + " –æ–±–Ω–æ–≤–ª—ë–Ω");
    }

    // —Ä–∞—Å—á—ë—Ç —Å—Ç–∞—Ç—É—Å–∞ —ç–ø–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–∞–±—Ç–∞—Å–æ–∫
    private void calculateEpicStatus(int epicId) {
        Epic epic = epics.get(epicId);
        ArrayList<Integer> subtasksIds = epic.getSubtasksIds();
        Status oldStatus = epic.getStatus();
        Status newStatus;

        if (subtasksIds.size() == 0) {
            newStatus = Status.NEW;
        } else {
            boolean isExistNew = false;
            boolean isExistDone = false;
            boolean isExistWIP = false;

            for (Integer subId : subtasksIds) {
                Status subStatus = subtasks.get(subId).getStatus();
                if (subStatus == Status.NEW) {
                    isExistNew = true;
                } else if (subStatus == Status.DONE) {
                    isExistDone = true;
                } else if (subStatus == Status.IN_PROGRESS) {
                    isExistWIP = true;
                }
            }

            if (isExistNew && !isExistDone && !isExistWIP) {
                newStatus = Status.NEW;
            } else if (!isExistNew && isExistDone && !isExistWIP) {
                newStatus = Status.DONE;
            } else {
                newStatus = Status.IN_PROGRESS;
            }
        }

        if (oldStatus != newStatus) {
            epic.setStatus(newStatus);
            epics.put(epicId, epic);
        }

        System.out.println("–°—Ç–∞—Ç—É—Å —ç–ø–∏–∫–∞ ID-" + epicId + " –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω");
    }

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–∞–±—Ç–∞—Å–∫–∏
    public void updateSubtaskTitle(int subId, String title) {
        Subtask subtask = subtasks.get(subId);
        subtask.setTitle(title);
        subtasks.put(subId, subtask);

        System.out.println("\n–°–∞–±—Ç–∞—Å–∫–∞ ID-" + subId + " –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    }

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∞–±—Ç–∞—Å–∫–∏
    public void updateSubtaskDescription(int subId, String description) {
        Subtask subtask = subtasks.get(subId);
        subtask.setDescription(description);
        subtasks.put(subId, subtask);

        System.out.println("\n–°–∞–±—Ç–∞—Å–∫–∞ ID-" + subId + " –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    }

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–±—Ç–∞—Å–∫–∏
    public void updateSubtaskStatus(int subId, Status status) {
        int epicId = findEpicOfSubtask(subId);
        Subtask subtask = subtasks.get(subId);
        subtask.setStatus(status);
        subtasks.put(subId, subtask);

        System.out.println("\n–°–∞–±—Ç–∞—Å–∫–∞ ID-" + subId + " –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        calculateEpicStatus(epicId);
    }

    // –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–∞–±—Ç–∞—Å–∫–∏ –≤ –Ω–æ–≤—ã–π —ç–ø–∏–∫
    public void moveSubtask(int subId, int newEpicId) {
        Subtask subtask = subtasks.get(subId);
        int oldEpicId = findEpicOfSubtask(subId);
        Epic oldEpic = epics.get(oldEpicId);
        Epic newEpic = epics.get(newEpicId);
        ArrayList<Integer> subtasksIds = oldEpic.getSubtasksIds();

        // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ epicId —É —Å–∞–±—Ç–∞—Å–∫–∏
        subtask.setEpicId(newEpicId);
        subtasks.put(subId, subtask);

        // —É–¥–∞–ª–µ–Ω–∏–µ subId –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —ç–ø–∏–∫–∞
        subtasksIds.remove(subtasksIds.indexOf(subId));
        oldEpic.setSubtasksIds(subtasksIds);
        epics.put(oldEpicId, oldEpic);

        // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ subId –≤ –Ω–æ–≤—ã–π —ç–ø–∏–∫
        subtasksIds = newEpic.getSubtasksIds();
        subtasksIds.add(subId);
        newEpic.setSubtasksIds(subtasksIds);
        epics.put(newEpicId, newEpic);

        System.out.println("\n–°–∞–±—Ç–∞—Å–∫–∞ ID-" + subId + " –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∏–∑ —ç–ø–∏–∫–∞ ID-" +
                oldEpicId + " –≤ —ç–ø–∏–∫ ID-" + newEpicId);
        calculateEpicStatus(oldEpicId);
        calculateEpicStatus(newEpicId);
    }

    // —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Å–∫–∏ –ø–æ ID
    public void deleteTask(int taskId) {
        tasks.remove(taskId);
        System.out.println("\n–¢–∞—Å–∫–∞ ID-" + taskId + " —É–¥–∞–ª–µ–Ω–∞");
    }

    // —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö-–≤—Å–µ—Ö —Ç–∞—Å–æ–∫
    public void deleteAllTasks() {
        tasks.clear();
        System.out.println("\n–í—Å–µ —Ç–∞—Å–∫–∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã");
    }

    // —É–¥–∞–ª–µ–Ω–∏–µ —ç–ø–∏–∫–∞ —Å —Å–∞–±—Ç–∞—Å–∫–∞–º–∏ –ø–æ ID —ç–ø–∏–∫–∞
    public void deleteEpic(int epicId) {
        ArrayList<Integer> subtasksIds = epics.get(epicId).getSubtasksIds();
        for (Integer subId : subtasksIds) {
            subtasks.remove(subId);
        }
        epics.remove(epicId);
        System.out.println("\n–≠–ø–∏–∫ ID-" + epicId + " —Å–æ –≤—Å–µ–º–∏ —Å–∞–±—Ç–∞—Å–∫–∞–º–∏ —É–¥–∞–ª—ë–Ω");
    }

    // —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö-–≤—Å–µ—Ö —ç–ø–∏–∫–æ–≤ —Å —Å–∞–±—Ç–∞—Å–∫–∞–º–∏
    public void deleteAllEpics() {
        subtasks.clear();
        epics.clear();
        System.out.println("\n–í—Å–µ —ç–ø–∏–∫–∏ —Å —Å–∞–±—Ç–∞—Å–∫–∞–º–∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã");
    }

    // —É–¥–∞–ª–µ–Ω–∏–µ —Å–∞–±—Ç–∞—Å–∫–∏ –ø–æ ID
    public void deleteSubtaskFromEpic(int subId) {
        int epicId = findEpicOfSubtask(subId);
        Epic epic = epics.get(epicId);
        ArrayList<Integer> subtasksIds = epic.getSubtasksIds();

        subtasks.remove(subId);
        subtasksIds.remove(subtasksIds.indexOf(subId));
        epic.setSubtasksIds(subtasksIds);
        epics.put(epicId, epic);

        System.out.println("\n–°–∞–±—Ç–∞—Å–∫–∞ ID-" + subId + " —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —ç–ø–∏–∫–∞ ID-" + epicId);
        calculateEpicStatus(epicId);
    }

    // —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö-–≤—Å–µ—Ö —Å–∞–±—Ç–∞—Å–æ–∫ —É —ç–ø–∏–∫–∞
    public void deleteAllSubtasksFromEpic(int epicId) {
        Epic epic = epics.get(epicId);
        ArrayList<Integer> subtasksIds = epic.getSubtasksIds();

        for (Integer subId : subtasksIds) {
            subtasks.remove(subId);
        }

        subtasksIds.clear();
        epic.setSubtasksIds(subtasksIds);
        epics.put(epicId, epic);

        System.out.println("\n–°–∞–±—Ç–∞—Å–∫–∏ —ç–ø–∏–∫–∞ ID-" + epicId + " –æ—á–∏—â–µ–Ω—ã —Å–æ–∂–∂–µ–Ω–∏–µ–º");
        calculateEpicStatus(epicId);
    }

    // ‚ö™üü°üü¢
    // –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Å–∫–µ
    public void printInfoTask(int taskId) {
        Task task = tasks.get(taskId);
        String title = task.getTitle();
        String description = task.getDescription();
        Status status = task.getStatus();
        String icon = "";

        if (status == Status.NEW) {
            icon = "‚ö™ New -- ";
        } else if (status == Status.DONE) {
            icon = "\uD83D\uDFE2 Done -- ";
        } else if (status == Status.IN_PROGRESS) {
            icon = "\uD83D\uDFE1 In progress -- ";
        }

        System.out.println("\n–¢–∞—Å–∫–∞ ID-" + taskId + ": ");
        System.out.println(icon + title);
        System.out.println(description);
    }

    // ‚¨úüü®‚úÖ
    // –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ø–∏–∫–µ
    public void printInfoEpic(int epicId) {
        Epic epic = epics.get(epicId);
        String title = epic.getTitle();
        String description = epic.getDescription();
        Status status = epic.getStatus();
        int subCounter = epic.getSubtasksIds().size();
        String icon = "";

        if (status == Status.NEW) {
            icon = "‚¨ú New -- ";
        } else if (status == Status.DONE) {
            icon = "‚úÖ Done -- ";
        } else if (status == Status.IN_PROGRESS) {
            icon = "\uD83D\uDFE8 In progress -- ";
        }

        System.out.println("\n–≠–ø–∏–∫ ID-" + epicId + ": ");
        System.out.println(icon + title);
        System.out.println(description);
        System.out.println("–°–∞–±—Ç–∞—Å–æ–∫: " + subCounter);
    }

    // üíÄüò∏üëΩ
    // –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∞–±—Ç–∞—Å–∫–µ
    private void printInfoSubtask(int subId) {
        int epicId = findEpicOfSubtask(subId);
        Epic epic = epics.get(epicId);
        Subtask subtask = subtasks.get(subId);
        String title = subtask.getTitle();
        String description = subtask.getDescription();
        Status status = subtask.getStatus();
        String icon = "";

        if (status == Status.NEW) {
            icon = "\uD83D\uDC80 New -- ";
        } else if (status == Status.DONE) {
            icon = "\uD83D\uDC7D Done -- ";
        } else if (status == Status.IN_PROGRESS) {
            icon = "\uD83D\uDE38 In progress -- ";
        }

        System.out.println("\n–≠–ø–∏–∫ ID-" + epicId + " -> –°–∞–±—Ç–∞—Å–∫–∞ ID-" + subId + ": ");
        System.out.println(icon + title);
        System.out.println(description);
    }

    // –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Å–∞–±—Ç–∞—Å–∫–∞—Ö —ç–ø–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    private void printInfoAllSubtasksOfEpic(int epicId) {
        Epic epic = epics.get(epicId);
        ArrayList<Integer> subtasks = epic.getSubtasksIds();
        if (subtasks.size() > 0) {
            for (Integer subId : subtasks) {
                printInfoSubtask(subId);
            }
        } else {
            System.out.println("\n–≠–ø–∏–∫ ID-" + epicId + " –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∞–±—Ç–∞—Å–æ–∫");
        }
    }

    // –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ø–∏–∫–µ —Å–æ –≤—Å–µ–º–∏ –µ–≥–æ —Å–∞–±—Ç–∞—Å–∫–∞–º–∏
    public void printInfoEpicWithSubtasks(int epicId) {
        printInfoEpic(epicId);
        printInfoAllSubtasksOfEpic(epicId);
    }

    // –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Ç–∞—Å–∫–∞—Ö
    public void printInfoAllTasks() {
        for (Integer taskId : tasks.keySet()) {
            printInfoTask(taskId);
        }
    }

    // –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —ç–ø–∏–∫–∞—Ö –±–µ–∑ —Å–∞–±—Ç–∞—Å–æ–∫
    public void printInfoAllEpics() {
        for (Integer epicId : epics.keySet()) {
            printInfoEpic(epicId);
        }
    }

    // –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —ç–ø–∏–∫–∞—Ö —Å —Å–∞–±—Ç–∞—Å–∫–∞–º–∏
    public void printInfoAllEpicsWithSubtasks() {
        for (Integer epicId : epics.keySet()) {
            printInfoEpicWithSubtasks(epicId);
        }
    }

    // –Ω–∞–π—Ç–∏ —ç–ø–∏–∫ –ø–æ ID —Å–∞–±—Ç–∞—Å–∫–∏
    private int findEpicOfSubtask(int subId) {
        int epicId = -1;

        for (Integer epicIndx : epics.keySet()) {
            Epic epic = epics.get(epicIndx);
            ArrayList<Integer> subt = epic.getSubtasksIds();
            for (Integer subIndx : subt) {
                epicId = subId == subIndx ? epicIndx : epicId;
            }
        }

        return epicId;
    }
}
